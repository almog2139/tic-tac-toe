{"version":3,"sources":["services/utilService.js","pages/BoardApp.jsx","App.jsx","services/toyService.js","store/reducers/toyReducer.js","store/store.js","serviceWorker.js","index.js"],"names":["utilService","getRandomInt","min","max","Math","ceil","floor","random","makeId","length","text","possible","i","charAt","Board","useState","board","setBoard","player","setCurrPlayer","winner","setWinner","gameOn","setGameOn","player1","buildBoard","j","checkWinRowColumn","cellI","cellJ","countC","countR","checkWinBoardDiagonal","countPrimaryDialog","countSecodaryDialog","useEffect","nextPlayer","console","log","className","map","onClick","ev","stopPropagation","copyBoard","onClickCell","idx","index","App","Axios","create","withCredentials","initialState","filterBy","toys","msg","rootReducer","combineReducers","toyReducer","state","action","type","toy","_id","filter","toyId","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","addEventListener","e","prompt","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.be09639a.chunk.js","sourcesContent":["export const utilService = {\r\n    getRandomInt,\r\n    makeId\r\n}\r\n\r\n\r\nfunction getRandomInt(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\r\n}\r\n\r\nfunction makeId(length=3) {\r\n    var text = \"\";\r\n    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n\r\n    for (var i = 0; i < length; i++) {\r\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\r\n    }\r\n\r\n    return text;\r\n}","\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { utilService } from '../services/utilService';\r\n\r\nexport const Board = () => {\r\n    const [board, setBoard] = useState([])\r\n    const [player, setCurrPlayer] = useState('üßÅ')\r\n    const [winner, setWinner] = useState('')\r\n    const [gameOn, setGameOn] = useState(true)\r\n    const player1 = 'üßÅ'\r\n    const player2 = 'üç©'\r\n\r\n\r\n\r\n    const buildBoard = () => {\r\n\r\n        let board = [];\r\n        for (let i = 0; i < 3; i++) {\r\n            board[i] = [];\r\n            for (let j = 0; j < 3; j++) {\r\n                board[i][j] = '';\r\n            }\r\n        }\r\n        setBoard(board)\r\n        setGameOn(true)\r\n        setWinner('')\r\n    }\r\n\r\n    const classNameTd = (idx, index) => {\r\n        if (idx % 2 === 0 && index === 1) return 'hori';\r\n        if (idx % 2 === 1 && index === 1) return 'vert hori';\r\n        if (index % 2 === 0 && idx === 1) return 'vert';\r\n    }\r\n\r\n    const onClickCell = (ev, i, j) => {\r\n        if (!gameOn) return\r\n        ev.stopPropagation();\r\n        let copyBoard = [...board]\r\n        if (copyBoard[i][j] !== '') return\r\n        copyBoard[i][j] = player\r\n\r\n        const isPlayerWin = checkWinBoardDiagonal(player, i, j) || checkWinRowColumn(player, i, j)\r\n        \r\n        if (isPlayerWin) {\r\n            setWinner(player)\r\n            setGameOn(false)\r\n        }\r\n\r\n        if (player === player1) setCurrPlayer(player2)\r\n        else setCurrPlayer(player1)\r\n        setBoard(copyBoard)\r\n        console.log('board', board);\r\n    }\r\n\r\n    const checkWinRowColumn = (player, cellI, cellJ) => {\r\n        let countC=0;\r\n        let countR=0;\r\n        for (var i = 0; i < 3; i++) {\r\n\r\n            if (board[i][cellJ] === player) countR++;\r\n        }\r\n\r\n        for (var j = 0; j < 3; j++) {\r\n            if (board[cellI][j] === player) countC++;\r\n\r\n        }\r\n        return countC === 3 || countR === 3\r\n    \r\n    }\r\n    const checkWinBoardDiagonal = (player, i, j) => {\r\n        let countPrimaryDialog = 0\r\n        let countSecodaryDialog = 0\r\n        for (let i = 0; i < board.length; i++) {\r\n            if (board[i][i] === player) countPrimaryDialog++;\r\n            if (board[i][board.length - 1] === player) countSecodaryDialog++\r\n        }\r\n         return countSecodaryDialog === 3 || countPrimaryDialog === 3\r\n      \r\n    }\r\n\r\n    useEffect(() => {\r\n        buildBoard()\r\n    }, [])\r\n\r\n\r\n    if (!board) return <h1>Loading...</h1>\r\n    const nextPlayer = (player === player1) ? 'Next Plyer is :üç©' : 'Next Plyer is :üßÅ'\r\n    console.log('board', board);\r\n    return (\r\n\r\n        <div className=\"board\">\r\n            <h1>curr player: {player}</h1>\r\n            <h1>{nextPlayer}</h1>\r\n            <table>\r\n                <tbody>\r\n                    {board.map((cellI, i) => {\r\n                        return <tr key={i}>\r\n                            {board[0].map((cellJ, j) => {\r\n                                console.log('board[i][j]', board[i][j]);\r\n                                return <td onClick={(ev) => onClickCell(ev, i, j)} className={classNameTd(j, i)} key={utilService.makeId()}>{board[i][j]}</td>\r\n                            })}\r\n                        </tr>\r\n                    })}\r\n\r\n                </tbody>\r\n            </table>\r\n            {winner && <p>{winner} IS WIN!</p>}\r\n            <button className=\"cta-btn\" onClick={() => buildBoard()}>Rest Game</button>\r\n        </div>\r\n    )\r\n}\r\n","//  import './App.css';\nimport './assets/styles/styles.scss'\nimport { Switch, Route } from 'react-router-dom';\nimport {routes} from './routes.js'\nimport { Board } from './pages/BoardApp';\n\n\nfunction App() {\n  return (\n    <div className=\"App main-container\">\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n","// import { utilService } from './utilService.js';\r\nimport Axios from 'axios';\r\nconst axios = Axios.create({\r\n    withCredentials: true\r\n})\r\n\r\nconst baseUrl = 'http://localhost:3030/api/toys'\r\n\r\n\r\n\r\nexport const toyService = {\r\n    removeToy,\r\n    query,\r\n    getById,\r\n    save,\r\n    getTypes,\r\n    getToyIdxById,\r\n    getChartData,\r\n    getChartDataByYear,\r\n\r\n    \r\n    // getPrevToy\r\n\r\n}\r\n\r\nasync function getToyIdxById(toyId) {\r\n    const toys = (await axios.get(`${baseUrl}`)).data\r\n    var toyIdx = toys.findIndex(toy => toy._id === toyId)\r\n    console.log('id service ', toyIdx);\r\n    return toyIdx\r\n\r\n\r\n}\r\n\r\nasync function getById(toyId) {\r\n    console.log('iddd', toyId);\r\n    const toy = (await axios.get(`${baseUrl}/${toyId}`)).data\r\n    return toy\r\n\r\n}\r\n\r\n\r\nasync function query(filterBy ={}) {\r\n    // console.log('filterrr', filterBy);\r\n    // let filterParams = '';\r\n    // if (filterBy) {\r\n\r\n    //     filterParams = (filterBy.type !== 'all') ? `?type=${filterBy.type}` : '?'\r\n    //     if (filterBy.name) {\r\n    //         console.log('filterByName', filterBy.name);\r\n    //         filterParams += `&name_like=${filterBy.name}`\r\n    //     }\r\n\r\n    //     if (filterBy.filter === 'inStock') filterParams += `&inStock=true`\r\n    //     else filterParams += `&_sort=${filterBy.filter}&_order=asc`\r\n    // }\r\n    // console.log('filterBy', filterParams)\r\n    // const toys = (await axios.get(`${baseUrl}${filterParams}`)).data\r\n     const toys = (await axios.get(baseUrl, {params: filterBy })).data\r\n    return toys\r\n\r\n}\r\n\r\nasync function removeToy(toyId) {\r\n    console.log('toyId', toyId);\r\n    axios.delete(`${baseUrl}/${toyId}`)\r\n}\r\n\r\nasync function save(toyToSave) {\r\n    if (toyToSave._id) {\r\n        // UPDATE\r\n        console.log('iff');\r\n        const toy = (await axios.put(`${baseUrl}/${toyToSave._id}`, toyToSave)).data\r\n        return toy\r\n    } else {\r\n        // CREATE\r\n        console.log('else');\r\n        toyToSave.createdAt = Date.now()\r\n        toyToSave.inStock = true\r\n        const toyToAdd = (await axios.post(`${baseUrl}`, toyToSave)).data\r\n        return toyToAdd\r\n    }\r\n}\r\n\r\n    \r\nasync function getTypes() {\r\n    const toys = (await axios.get(`${baseUrl}`)).data\r\n    var types = Array.from(new Set(toys.map(toy => toy.type)))\r\n    return types\r\n}\r\nasync function getChartData() {\r\n    const toys = (await axios.get(`${baseUrl}`)).data\r\n    const types = await getTypes()\r\n    const labels = types.map(type => type)\r\n    const datasets = [{\r\n        data: toys.reduce((acc, toy) => {\r\n            const currIdx = types.indexOf(toy.type);\r\n            const currAccCell = acc[currIdx]\r\n            acc[currIdx] = currAccCell ? acc[currIdx] + 1 : 1\r\n            return acc\r\n\r\n        }, []),\r\n        backgroundColor: [\r\n\r\n            '#FF6384',\r\n            '#36A2EB',\r\n            '#FFCE56',\r\n            '#0000FF',\r\n            '#00ff0d'\r\n\r\n\r\n        ],\r\n        hoverBackgroundColor: [\r\n            '#FF6384',\r\n            '#36A2EB',\r\n            '#FFCE56'\r\n        ]\r\n\r\n    }]\r\n    return { labels, datasets }\r\n\r\n}\r\n\r\n async function getChartDataByYear() {\r\n    const toys = (await axios.get(`${baseUrl}`)).data\r\n    let yearsMap = {}\r\n    toys.forEach(toy => {\r\n        const year = new Date(toy.createdAt).getFullYear()\r\n        if (yearsMap[year]) yearsMap[year] = yearsMap[year] + 1\r\n        else yearsMap[year] = 1\r\n\r\n    })\r\n    console.log('yearsMap', yearsMap);\r\n    return {\r\n        labels: [...Object.keys(yearsMap)],\r\n        datasets: [\r\n            {\r\n                label: 'Toys per year',\r\n                data: [...Object.values(yearsMap)]\r\n            }\r\n        ]\r\n    }\r\n\r\n}","import { toyService } from \"../../services/toyService.js\"\r\n\r\nconst initialState = {\r\n    filterBy: {},\r\n    // todos:todoService.query(),\r\n    toys: [],\r\n    msg:'',\r\n    \r\n\r\n}\r\n\r\n\r\nexport function toyReducer(state = initialState, action) {\r\n\r\n    switch (action.type) {\r\n        case 'SET_TOYS': {\r\n\r\n            return { ...state, toys: [...action.toys] }\r\n        }\r\n        case 'SET_MSG': {\r\n\r\n            return { ...state, msg: action.msg }\r\n        }\r\n        case 'CLEAR_MSG': {\r\n\r\n            return { ...state, msg:null }\r\n        }\r\n        // case 'TOGGLE_ISDONE_TODO':\r\n        //     return { ...state, todos: state.todos.map(todo => todo._id === action.todo._id ? action.todo : todo) }\r\n        case 'ADD_TOY':\r\n            return {\r\n        \r\n                ...state, toys: [...state.toys, action.toy]\r\n            }\r\n        case 'UPDATE_TOY':\r\n            return {...state, toys: state.toys.map(toy => toy._id === action.toy._id ? action.toy : toy) }\r\n          \r\n      \r\n            \r\n          \r\n        case 'SET_FILTER': {\r\n            return { ...state, filterBy: { ...action.filterBy } }\r\n        }\r\n        case 'REMOVE_TOY':\r\n            return { ...state, toys: state.toys.filter(toy => toy._id !== action.toyId) }\r\n        \r\n     \r\n        \r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import thunk from 'redux-thunk';\r\nimport { createStore, applyMiddleware, compose ,combineReducers} from 'redux'\r\n\r\n\r\n\r\nimport {toyReducer} from './reducers/toyReducer.js';\r\n\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    toyReducer,\r\n});\r\n\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nexport const store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux'\nimport { store } from './store/store.js'\nimport { HashRouter as Router } from 'react-router-dom'\nimport * as serviceWorker from './serviceWorker';\n\n\n\nwindow.addEventListener('beforeinstallprompt', (e) => {\n  console.log('beforeinstallprompt event has fired')\n  e.prompt()\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={ store }>\n    <Router>\n            <App />\n        </Router>\n  \n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nserviceWorker.register();\n\n\n\n"],"sourceRoot":""}